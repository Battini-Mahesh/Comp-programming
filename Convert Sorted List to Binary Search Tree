# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:
       
        nums = []
        while head:
            nums.append(head.val)
            head = head.next
        return self.buildTree(nums)
    def buildTree(self,nums: Optional[List]) -> Optional[TreeNode]:
        l= len(nums)
        if l == 0:
            return 
        else:
            index = l//2
            root= TreeNode(nums[index])
            root.left = self.buildTree(nums[0:index])
            root.right = self.buildTree(nums[index + 1:])
        return root
        
        
        
